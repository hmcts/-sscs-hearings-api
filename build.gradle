buildscript {
  dependencies {
    classpath("net.serenity-bdd:serenity-gradle-plugin:3.1.20")
  }
}

plugins {
  id 'application'
  id 'checkstyle'
  id 'pmd'
  id 'jacoco'
  id 'io.spring.dependency-management' version '1.0.11.RELEASE'
  id 'org.springframework.boot' version '2.6.3'
  id 'org.owasp.dependencycheck' version '6.5.3'
  id 'com.github.ben-manes.versions' version '0.42.0'
  id 'org.sonarqube' version '3.3'
  id 'info.solidsoft.pitest' version '1.5.2'
  id 'com.gorylenko.gradle-git-properties' version '2.3.1'
  id 'au.com.dius.pact' version '4.2.14'
}

apply plugin: 'net.serenity-bdd.aggregator'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'info.solidsoft.pitest'

gitProperties {
 gitPropertiesDir = new File("${project.rootDir}/src/main/resources/uk/gov/hmcts/reform/sscs")
  keys = ['git.commit.id', 'git.commit.time']
  dateFormat = "yyyy-MM-dd'T'HH:mmZ"
  dateFormatTimeZone = "GMT"
}

processResources.dependsOn(':generateGitProperties')

group = 'uk.gov.hmcts.reform'
version = '0.0.1'

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(11)
  }
}

sourceSets {
  functionalTest {
    java {
      compileClasspath += main.output + test.output
      runtimeClasspath += main.output + test.output
      srcDir file('src/functionalTest/java')
    }
    resources.srcDir file('src/functionalTest/resources')
  }

  integrationTest {
    java {
      compileClasspath += main.output + test.output
      runtimeClasspath += main.output + test.output
      srcDir file('src/integrationTest/java')
    }
    resources.srcDir file('src/integrationTest/resources')
  }

  smokeTest {
    java {
      compileClasspath += main.output + test.output
      runtimeClasspath += main.output + test.output
      srcDir file('src/smokeTest/java')
    }
    resources.srcDir file('src/smokeTest/resources')
  }
}

task integration(type: Test) {
  setTestClassesDirs(sourceSets.integrationTest.output.classesDirs)
  setClasspath(sourceSets.integrationTest.runtimeClasspath)
}

task functional(type: Test) {
  useJUnitPlatform()
  group = 'Functional Tests'
  description = 'Executes non-destructive functional tests in AAT against a running CCD and notification service'
  setTestClassesDirs(sourceSets.smokeTest.output.classesDirs)
  setClasspath(sourceSets.smokeTest.runtimeClasspath)
  include "uk/gov/hmcts/reform/sscs/functional/**"

}

configurations {
  functionalTestImplementation.extendsFrom testImplementation
  functionalTestRuntimeOnly.extendsFrom runtimeOnly

  integrationTestImplementation.extendsFrom testImplementation
  integrationTestRuntimeOnly.extendsFrom runtimeOnly

  smokeTestImplementation.extendsFrom testImplementation
  smokeTestRuntimeOnly.extendsFrom runtimeOnly
}

tasks.withType(JavaCompile) {
  options.compilerArgs << "-Xlint:unchecked" << "-Werror"
}

// https://github.com/gradle/gradle/issues/16791
tasks.withType(JavaExec).configureEach {
  javaLauncher.set(javaToolchains.launcherFor(java.toolchain))
}

tasks.withType(Test) {
  useJUnitPlatform()

  testLogging {
    exceptionFormat = 'full'
  }
}

test {
  failFast = true
}

checkstyle {
  maxWarnings = 0
  toolVersion = '9.2.1'
  getConfigDirectory().set(new File(rootDir, 'config/checkstyle'))
}

pmd {
  toolVersion = "6.41.0"
  sourceSets = [sourceSets.main]
  reportsDir = file("$project.buildDir/reports/pmd")
  // https://github.com/pmd/pmd/issues/876
  ruleSets = []
  ruleSetFiles = files("config/pmd/ruleset.xml")
}

jacocoTestReport {
  executionData(test, integration)
  reports {
    xml.required = true
    csv.required = false
    xml.destination file("${buildDir}/reports/jacoco/test/jacocoTestReport.xml")
  }
}

project.tasks['sonarqube'].dependsOn test, integration, jacocoTestReport

sonarqube {
  properties {
    property "sonar.projectName", "SSCS - Hearings Api"
    property "sonar.projectKey", "SSCSHA"
    property "sonar.coverage.jacoco.xmlReportPaths", "${jacocoTestReport.reports.xml.destination.path}"
    property "sonar.pitest.mode", "reuseReport"
    property "sonar.pitest.reportsDirectory", "build/reports/pitest"
    property "sonar.exclusions", "src/main/java/uk/gov/hmcts/reform/sscs/HearingsApiApplication.java" +
      "src/main/java/uk/gov/hmcts/reform/sscs/config/**,"
  }
}

pitest {
  junit5PluginVersion = '0.12'
  targetClasses = ['uk.gov.hmcts.reform.sscs.*']
  excludedClasses = [
    'uk.gov.hmcts.reform.sscs.config.*',
    'uk.gov.hmcts.reform.sscs.HearingsApiApplication'
  ]
  threads = 10
  outputFormats = ['XML', 'HTML']
  timestampedReports = false
  mutationThreshold = 80
}

project.tasks['pitest'].group = "Verification"
// before committing a change, make sure task still works
dependencyUpdates {
  def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { qualifier -> version.toUpperCase().contains(qualifier) }
    def regex = /^[0-9,.v-]+$/
    return !stableKeyword && !(version ==~ regex)
  }
  rejectVersionIf { selection -> // <---- notice how the closure argument is named
    return isNonStable(selection.candidate.version) && !isNonStable(selection.currentVersion)
  }
}

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
  // Specifies if the build should be failed if a CVSS score above a specified level is identified.
  // range of 0-10 fails the build, anything greater and it doesn't fail the build
  failBuildOnCVSS = System.getProperty('dependencyCheck.failBuild') == 'true' ? 0 : 11
  //suppressionFile = 'config/owasp/suppressions.xml'

  analyzers {
    // Disable scanning of .NET related binaries
    assemblyEnabled = false
  }
}

repositories {
  mavenLocal()
  mavenCentral()
  maven { url 'https://jitpack.io' }
  // Requires authentication, if it gets here the library cannot be found!
  maven {
    url 'https://repo.spring.io/libs-milestone'
  }
}

def versions = [
  junit           : '5.7.2',
  junitPlatform	  : '1.7.2',
  logging         : '5.1.7',
  pitest          : '1.5.2',
  restAssured     : '4.3.3',
  serenity        : '3.1.20',
  springDoc       : '1.6.6',
  springCloud     : '3.1.0',
  springFoxSwagger: '3.0.0',
  springHystrix   : '2.2.10.RELEASE',
  tomcat          : '9.0.58'
]

ext {
  log4JVersion = "2.17.1"
}


ext.libraries = [
  junit5: [
    "org.junit.jupiter:junit-jupiter-api:${versions.junit}",
    "org.junit.jupiter:junit-jupiter-engine:${versions.junit}",
    "org.junit.jupiter:junit-jupiter-params:${versions.junit}",
    "org.junit.platform:junit-platform-commons:${versions.junitPlatform}",
    "org.junit.platform:junit-platform-engine:${versions.junitPlatform}"
  ]
]

dependencies {
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-aop'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-json'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-validation'
  annotationProcessor  group: 'org.springframework.boot', name: 'spring-boot-configuration-processor'

  implementation group: 'org.apache.tomcat.embed', name: 'tomcat-embed-core', version: versions.tomcat
  implementation group: 'org.apache.tomcat.embed', name: 'tomcat-embed-el', version: versions.tomcat
  implementation group: 'org.apache.tomcat.embed', name: 'tomcat-embed-websocket', version: versions.tomcat

  implementation group: 'org.springdoc', name: 'springdoc-openapi-ui', version: versions.springdoc

  implementation group: 'com.github.hmcts.java-logging', name: 'logging', version: versions.logging

  implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: log4JVersion
  implementation group: 'org.apache.logging.log4j', name: 'log4j-to-slf4j', version: log4JVersion

  implementation group: 'net.serenity-bdd', name: 'serenity-core', version: versions.serenity
  implementation group: 'net.serenity-bdd', name: 'serenity-junit', version: versions.serenity
  implementation group: 'net.serenity-bdd', name: 'serenity-rest-assured', version: versions.serenity
  implementation group: 'net.serenity-bdd', name: 'serenity-spring', version: versions.serenity

  //implementation group: 'com.github.hmcts',  name: 'auth-checker-lib', version: '2.1.5'

  testImplementation(platform('org.junit:junit-bom:5.8.2'))
  testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
  testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test', {
    exclude group: 'junit', module: 'junit'
    exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
  }
  testImplementation "org.junit.vintage:junit-vintage-engine:${versions.junit}"

  testImplementation group: 'org.pitest', name: 'pitest', version: versions.pitest
  testImplementation 'info.solidsoft.gradle.pitest:gradle-pitest-plugin:1.5.2'
  testImplementation 'org.codehaus.sonar-plugins:sonar-pitest-plugin:0.5'

  functionalTestImplementation sourceSets.main.runtimeClasspath
  functionalTestImplementation sourceSets.test.runtimeClasspath

  smokeTestImplementation sourceSets.main.runtimeClasspath
  smokeTestImplementation sourceSets.test.runtimeClasspath

  // constraints {
  //   implementation(group: 'com.jhlabs', name: 'filters', version: '2.0.235-1') {
  //     because 'CVE-2005-0406'
  //   }
  //   implementation(group: 'com.ibm.icu', name: 'icu4j', version: '70.1') {
  //     because 'CVE-2020-21913'
  //   }
  //   implementation(group: 'org.apache.pdfbox', name: 'pdfbox', version: '2.0.25') {
  //     because 'CVE-2018-11797,CVE-2018-8036,CVE-2021-27807,CVE-2021-27906,CVE-2021-31811,CVE-2021-31812'
  //   }
  //   implementation(group: 'org.apache.pdfbox', name: 'xmpbox', version: '2.0.25') {
  //     because 'CVE-2018-11797, CVE-2018-8036, CVE-2021-27807, CVE-2021-27906, CVE-2021-31811, CVE-2021-31812'
  //   }
  //   implementation(group: 'org.bouncycastle', name: 'bcprov-jdk15on', version: '1.64') {
  //     because 'CVE-2020-15522'
  //   }
  //   implementation(group: 'com.thoughtworks.xstream', name: 'xstream', version: ' 1.4.19') {
  //     because 'CVE-2021-43859'
  //   }
  // }

}

mainClassName = 'uk.gov.hmcts.reform.sscs.HearingsApiApplication'

bootJar {
  archiveFileName = "sscs-hearings-api.jar"

  manifest {
    attributes('Implementation-Title': project.name, 'Implementation-Version': project.version.toString())
  }
}

// Gradle 7.x issue, workaround from: https://github.com/gradle/gradle/issues/17236#issuecomment-894768083
rootProject.tasks.named("processSmokeTestResources") {
  duplicatesStrategy = 'include'
}
rootProject.tasks.named("processFunctionalTestResources") {
  duplicatesStrategy = 'include'
}

task fortifyScan(type: JavaExec)  {
  mainClass = "uk.gov.hmcts.fortifyclient.FortifyClientMainApp"
  classpath += sourceSets.test.runtimeClasspath
  jvmArgs = ['--add-opens=java.base/java.lang.reflect=ALL-UNNAMED']
}

project.ext {
  pacticipant = 'sscs-hearings-api'
  pacticipantVersion = getCheckedOutGitCommitHash()
}

pact {
  broker {
    pactBrokerUrl = System.getenv("PACT_BROKER_FULL_URL") ?: 'http://localhost:80'
  }
  publish {
    pactDirectory = 'pacts'
    tags = [System.getenv("PACT_BRANCH_NAME") ?:'Dev']
    version = project.pacticipantVersion
  }
}

static def getCheckedOutGitCommitHash() {
  'git rev-parse --verify --short HEAD'.execute().text.trim()
}

run {
  def debug = System.getProperty("debug")
  if (debug == 'true') {
    jvmArgs = ['-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5006']
  }
}

wrapper {
  distributionType = Wrapper.DistributionType.ALL
}
